{"version":3,"file":"o.min.js","sources":["../../src/o.ts","../../src/ORequest.ts","../../src/OBatch.ts","../../src/OHandler.ts"],"sourcesContent":["import { OdataConfig } from \"./OdataConfig\";\r\nimport { OHandler } from \"./OHandler\";\r\n\r\n/**\r\n * Use the 'o'-function to initialize a request directly or use the returned\r\n * handler to store the settings.\r\n *\r\n * Use o() directly jquery like:\r\n * @example\r\n * ```typescript\r\n *  await o('https://rootUrl').get('resource').query();\r\n * ```\r\n *\r\n * Or with a handler:\r\n * @example\r\n * ```typescript\r\n *  const oHandler = o('https://rootUrl');\r\n *  await oHandler.get('resource').query({ $top: 2 });\r\n * ```\r\n *\r\n * @param rootUrl The url to query\r\n * @param config The odata and fetch configuration.\r\n */\r\nexport function o(\r\n  rootUrl: string | URL,\r\n  config: Partial<OdataConfig> = {}\r\n) {\r\n  // polyfill fetch if we have no fetch\r\n  const env = typeof window !== \"undefined\" ? window : global;\r\n  if (\r\n    !(\"fetch\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window !== \"undefined\"\r\n  ) {\r\n    throw new Error(\r\n      \"No polyfill found for fetch(). You need to include dist/umd/o.polyfill.js to work with older browsers\"\r\n    );\r\n  }\r\n\r\n  if (\r\n    !(\"fetch\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window === \"undefined\"\r\n  ) {\r\n    require(\"cross-fetch/polyfill\");\r\n  }\r\n\r\n  if (\r\n    !(\"URL\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window !== \"undefined\"\r\n  ) {\r\n    throw new Error(\r\n      \"No polyfill found for URL(). You need to include dist/umd/o.polyfill.js to work with older browsers\"\r\n    );\r\n  }\r\n\r\n  if (\r\n    !(\"URL\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window === \"undefined\"\r\n  ) {\r\n    require(\"universal-url\").shim();\r\n  }\r\n\r\n  // set the default configuration values\r\n  const defaultConfigValues: OdataConfig = {\r\n    batch: {\r\n      boundaryPrefix: \"batch_\",\r\n      changsetBoundaryPrefix: \"changset_\",\r\n      endpoint: \"$batch\",\r\n      headers: new Headers({\r\n        \"Content-Type\": \"multipart/mixed\",\r\n      }),\r\n      useChangset: false,\r\n      useRelativeURLs: false,\r\n    },\r\n    credentials: \"omit\",\r\n    fragment: \"value\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n    }),\r\n    mode: \"cors\",\r\n    redirect: \"follow\",\r\n    referrer: \"client\",\r\n    onStart: () => null,\r\n    onError: () => null,\r\n    onFinish: () => null,\r\n  };\r\n\r\n  const mergedConfig: OdataConfig = { ...defaultConfigValues, ...config };\r\n  if (typeof rootUrl === \"string\") {\r\n    try {\r\n      // we assuming a resource\r\n      const configUrl = (mergedConfig.rootUrl ||\r\n        window.location.href) as string;\r\n      rootUrl = new URL(\r\n        rootUrl,\r\n        configUrl.endsWith(\"/\") ? configUrl : `${configUrl}/`\r\n      );\r\n    } catch (ex) {\r\n      // no window?!\r\n      rootUrl = new URL(rootUrl as string, mergedConfig.rootUrl);\r\n    }\r\n  }\r\n  mergedConfig.rootUrl = rootUrl;\r\n  return new OHandler(mergedConfig);\r\n}\r\n\r\n/**\r\n * Default exports\r\n */\r\nexport * from \"./OBatch\";\r\nexport * from \"./OdataConfig\";\r\nexport * from \"./OdataQuery\";\r\nexport * from \"./OHandler\";\r\nexport * from \"./ORequest\";\r\n","import { OdataQuery } from \"./OdataQuery\";\r\n\r\nexport class ORequest {\r\n  public url: URL;\r\n\r\n  constructor(url: URL | string, public config: RequestInit) {\r\n    if (typeof url === \"string\") {\r\n      this.url = new URL(url);\r\n    } else {\r\n      this.url = url as URL;\r\n    }\r\n  }\r\n\r\n  public get fetch() {\r\n    const req = new Request(this.url.href, this.config);\r\n    return fetch(req, this.config);\r\n  }\r\n\r\n  public applyQuery(query?: OdataQuery) {\r\n    for (const key in query) {\r\n      if (query.hasOwnProperty(key)) {\r\n        if (this.url.searchParams.get(key)) {\r\n          this.url.searchParams.set(key, query[key]);\r\n        } else {\r\n          this.url.searchParams.append(key, query[key]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { OdataConfig } from \"./OdataConfig\";\r\nimport { OdataQuery } from \"./OdataQuery\";\r\nimport { ORequest } from \"./ORequest\";\r\n\r\nconst CRLF = \"\\r\\n\";\r\n\r\nexport class OBatch {\r\n  // \"\" here prevents 'undefined' at start of body under some conditions.\r\n  private batchBody = \"\";\r\n  private batchUid;\r\n  private batchConfig: OdataConfig;\r\n\r\n  constructor(\r\n    resources: ORequest[],\r\n    config: OdataConfig,\r\n    query?: OdataQuery,\r\n    private changeset: boolean = false,\r\n  ) {\r\n    this.batchConfig = { ...config, ...config.batch };\r\n    this.batchUid = this.getUid();\r\n    (this.batchConfig.headers as Headers).set(\r\n       \"Content-Type\",\r\n       `multipart/mixed; boundary=${this.batchUid}`,\r\n    );\r\n\r\n    if (this.batchConfig.batch.useChangset) {\r\n      resources = this.checkForChangset(resources, query);\r\n    } else {\r\n      this.batchBody += `--${this.batchUid}`;\r\n    }\r\n\r\n    resources.forEach(\r\n      (req) => req.config.method === \"GET\" && req.applyQuery(query),\r\n    );\r\n    let contentId = 0;\r\n    this.batchBody += resources.map((req) => {\r\n      contentId++;\r\n      if( req.config.method===\"GET\" ){\r\n        return [\r\n          \"\",\r\n          \"Content-Type: application/http\",\r\n          \"Content-Transfer-Encoding: binary\",\r\n          \"\",\r\n          `${req.config.method} ${this.getRequestURL(req)} HTTP/1.1`,\r\n          `${this.getHeaders(req)}`,\r\n          `${this.getBody(req)}`\r\n        ].join(CRLF);\r\n      }\r\n      else {\r\n        return [\r\n          \"\",\r\n          \"Content-Type: application/http\",\r\n          \"Content-Transfer-Encoding: binary\",\r\n          `Content-ID: ${contentId}`,\r\n          \"\",\r\n          `${req.config.method} ${this.getRequestURL(req)} HTTP/1.1`,\r\n          `${this.getHeaders(req)}`,\r\n          `${this.getBody(req)}`\r\n        ].join(CRLF);\r\n      }\r\n\r\n    }).join(`${CRLF}--${this.batchUid}`);\r\n\r\n    this.batchBody += `${CRLF}--${this.batchUid}--${CRLF}`;\r\n    if(!changeset){\r\n      (this.batchConfig.headers as Headers).set(\r\n        \"Content-Type\",\r\n        `multipart/mixed;boundary=${this.batchUid}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  public async fetch(url: URL) {\r\n    const req = new ORequest(url, {\r\n      ...this.batchConfig,\r\n      body: this.batchBody,\r\n      method: \"POST\",\r\n    });\r\n    const res: Response = await req.fetch;\r\n    if (res.status < 400) {\r\n      const data = await res.text();\r\n      return this.parseResponse(data, res.headers.get(\"Content-Type\"));\r\n    } else {\r\n      throw res;\r\n    }\r\n  }\r\n\r\n  public parseResponse(responseData: string, contentTypeHeader: string): any {\r\n    const headers = contentTypeHeader.split(\"boundary=\");\r\n    const boundary = headers[headers.length - 1];\r\n    const splitData = responseData.split(`--${boundary}`);\r\n    splitData.shift();\r\n    splitData.pop();\r\n    let wasWithChangesetresponse = false;\r\n    const parsedData = splitData.map((data) => {\r\n      const dataSegments = data.trim().split(\"\\r\\n\\r\\n\");\r\n      if (dataSegments.length === 0) {\r\n        // we are unable to parse -> return all\r\n        return data;\r\n      } else if (dataSegments.length > 3) {\r\n        const header = dataSegments.find(\r\n            (x) => x.startsWith(\"Content-Type: \") && x.includes(\"boundary=changesetresponse_\"));\r\n        if (!header) {\r\n          return data;\r\n        }\r\n        dataSegments.shift();\r\n        wasWithChangesetresponse = true;\r\n        return this.parseResponse(dataSegments.join(\"\\r\\n\\r\\n\"), header);\r\n      } else {\r\n        var contentIdHeader = dataSegments[0].split(\"\\r\\n\").find(function (x) { return x.startsWith(\"Content-ID: \"); });\r\n        if (contentIdHeader) {\r\n          try {\r\n            var contentId = parseInt(contentIdHeader.substring(12), 10);\r\n          } catch (ex) {\r\n          }\r\n        }\r\n        var status = +dataSegments[1].split(\" \")[1];\r\n        if (dataSegments.length === 3) {\r\n          // if length == 3 we have a body, try to parse if JSON and return that!\r\n          var body;\r\n          try {\r\n            const parsed = JSON.parse(dataSegments[2]);\r\n            const hasFragment = parsed[this.batchConfig.fragment];\r\n            body = hasFragment || parsed;\r\n          } catch (ex) {\r\n            body = dataSegments[2];\r\n          }\r\n        }\r\n        return { contentId, status, body };\r\n      }\r\n    });\r\n    if (wasWithChangesetresponse) {\r\n        return parsedData[0];\r\n    }\r\n    return parsedData;\r\n  }\r\n\r\n  /**\r\n   * If we determine a changset (POST, PUT, PATCH) we initalize a new\r\n   * OBatch instance for it.\r\n   */\r\n  private checkForChangset(resources: ORequest[], query: OdataQuery) {\r\n    const changeRes = this.getChangeResources(resources);\r\n\r\n    if (this.changeset) {\r\n      this.batchBody += [\r\n        \"\",\r\n        `Content-Type: multipart/mixed;boundary=${this.batchUid}`,\r\n        \"\",\r\n        `--${this.batchUid}`\r\n      ].join(CRLF);\r\n    } else if (changeRes.length > 0) {\r\n      this.batchBody = `--${this.batchUid}`;\r\n      this.batchBody += new OBatch(\r\n        changeRes,\r\n        this.batchConfig,\r\n        query,\r\n        true,\r\n      ).batchBody;\r\n      resources = this.getGETResources(resources);\r\n    } else {\r\n      this.batchBody = `--${this.batchUid}`;\r\n    }\r\n    return resources;\r\n  }\r\n\r\n  private getGETResources(resources: ORequest[]): ORequest[] {\r\n    return resources.filter((req) => req.config.method === \"GET\");\r\n  }\r\n\r\n  private getChangeResources(resources: ORequest[]): ORequest[] {\r\n    return resources.filter((req) => req.config.method !== \"GET\");\r\n  }\r\n\r\n  private getBody(req: ORequest) {\r\n    if (req.config.body) {\r\n      return `${req.config.body}${CRLF}${CRLF}`;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  private getUid() {\r\n    let d = new Date().getTime();\r\n    const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n      const r = (d + Math.random() * 16) % 16 | 0;\r\n      d = Math.floor(d / 16);\r\n      return (c === \"x\" ? r : (r & 0x7) | 0x8).toString(16);\r\n    });\r\n    return `${\r\n      this.changeset\r\n        ? this.batchConfig.batch.changsetBoundaryPrefix\r\n        : this.batchConfig.batch.boundaryPrefix\r\n    }${uuid}`;\r\n  }\r\n\r\n  private getHeaders(req: ORequest): string {\r\n  // Request headers can be Headers | string[][] | Record<string, string>.\r\n  // A new Headers instance around them allows treatment of all three types\r\n  // to be the same. This also applies security last two could bypass.\r\n  const headers = new Headers(req.config.headers || undefined) as any;\r\n  // Convert each header to single string.\r\n  // Headers is iterable. Array.from is needed instead of Object.keys.\r\n  const mapped = Array.from(headers).map(([k, v]) => `${k}: ${v}`);\r\n  if (mapped.length) {\r\n    // Need to ensure a blank line between HEADERS and BODY. When there are\r\n    // headers, it must be added here. Otherwise blank is added in ctor.\r\n    mapped.push(\"\");\r\n  }\r\n  return mapped.join(CRLF);\r\n  }\r\n\r\n  private getRequestURL(req: ORequest): string {\r\n  let href = req.url.href;\r\n  if (this.batchConfig.batch.useRelativeURLs) {\r\n    // Strip away matching root from request.\r\n    href = href.replace((this.batchConfig.rootUrl as URL).href, \"\");\r\n  }\r\n  return href;\r\n  }\r\n}\r\n","import { OBatch } from \"./OBatch\";\r\nimport { OdataConfig } from \"./OdataConfig\";\r\nimport { OdataQuery } from \"./OdataQuery\";\r\nimport { ORequest } from \"./ORequest\";\r\n\r\ntype BodyType = Blob | BufferSource | FormData | URLSearchParams | string | object;\r\n\r\nexport class OHandler {\r\n  private requests: ORequest[] = [];\r\n\r\n  constructor(public config: OdataConfig) {}\r\n\r\n  /**\r\n   * Does a fetch request to the given endpoint and request\r\n   * all resources in sequent. Tries to parse the result logical\r\n   * so that no further processing is used. If the result is only one\r\n   * entity a object is returned, otherwise a array of objects.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *  const russell = await o('https://services.odata.org/TripPinRESTierService/')\r\n   *  .get('People('russellwhyte')\r\n   *  .query();\r\n   *\r\n   *  console.log(russell); // shows: { FirstName: \"Russell\", LastName: \"Whyte\" [...] }\r\n   * ```\r\n   *\r\n   * If the request fails with an error code higher then 400 it throws the\r\n   * Response:\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *  try {\r\n   *    const unknown = await o('https://services.odata.org/TripPinRESTierService/')\r\n   *      .get('People('unknown')\r\n   *      .query();\r\n   *  } catch(res) { // Response\r\n   *    console.log(res.status); // 404\r\n   *  }\r\n   * ```\r\n   *\r\n   * @param query The URLSearchParams that are added to the question mark on the url.\r\n   *              That are usually the odata queries like $filter, $top, etc...\r\n   * @returns Either an array or a object with the given entities. If multiple\r\n   *          resources are fetched, this method returns a array of array/object. If there\r\n   *          is no content (e.g. for delete) this method returns the Response\r\n   */\r\n  public async query(query?: OdataQuery) {\r\n    try {\r\n      this.config.onStart(this);\r\n      const response: Response[] = await this.getFetch(query);\r\n      const json = await Promise.all(\r\n        response.map(\r\n          async (res) => {\r\n            if (res.status >= 400) {\r\n              this.config.onError(this, res);\r\n              throw res;\r\n            } else if (res.ok && res.json) {\r\n              try {\r\n                this.config.onFinish(this, res);\r\n                const data = await res.json();\r\n                return data[this.config.fragment] || data;\r\n              } catch (ex) {\r\n                return res;\r\n              }\r\n            } else {\r\n              return await res.text();\r\n            }\r\n          },\r\n        ),\r\n      );\r\n      return json.length > 1 ? json : json[0];\r\n    } catch (ex) {\r\n      throw ex;\r\n    } finally {\r\n      this.requests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request all requests in sequent. Does simply return a Response or Response[]\r\n   * without any data parsing applied.\r\n   *\r\n   * @param query The URLSearchParams that are added to the question mark on the url.\r\n   *              That are usually the odata queries like $filter, $top, etc...\r\n   */\r\n  public async fetch(query?: OdataQuery) {\r\n    try {\r\n      this.config.onStart(this);\r\n      const fetch = await this.getFetch(query);\r\n      return fetch.length === 1 ? fetch[0] : fetch;\r\n    } catch (ex) {\r\n      this.config.onError(this, ex);\r\n      throw ex;\r\n    } finally {\r\n      this.config.onFinish(this);\r\n      this.requests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Does a batch http-batch request. All request in that sequent are send via one\r\n   * physically request and afterwards parsed to separate data chunks.\r\n   *\r\n   * @param query The URLSearchParams that are added to the question mark on the url.\r\n   *              That are usually the odata queries like $filter, $top, etc...\r\n   */\r\n  public async batch(query?: OdataQuery) {\r\n    try {\r\n      const batch = new OBatch(this.requests, this.config, query);\r\n      const url = this.getUrl(this.config.batch.endpoint);\r\n      const data = await batch.fetch(url);\r\n      return data;\r\n    } catch (ex) {\r\n      throw ex;\r\n    } finally {\r\n      this.requests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the data from the endpoint + resource url.\r\n   *\r\n   * @param resource The resource to request e.g. People/$value.\r\n   */\r\n  public get(resource: string = \"\") {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"GET\" });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Post data to an endpoint + resource.\r\n   *\r\n   * @param resource The resource to post to.\r\n   * @param body The data to post.\r\n   */\r\n  public post(resource: string = \"\", body: BodyType) {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"POST\", body: this.getBody(body) });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Put data to an endpoint + resource.\r\n   *\r\n   * @param resource The resource to put to.\r\n   * @param body The data to put.\r\n   */\r\n  public put(resource: string = \"\", body: BodyType) {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"PUT\", body: this.getBody(body) });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Patch data to an endpoint + resource.\r\n   *\r\n   * @param resource The resource to patch to.\r\n   * @param body The data to patch.\r\n   */\r\n  public patch(resource: string = \"\", body: BodyType) {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, {\r\n      ...this.config,\r\n      body: this.getBody(body),\r\n      method: \"PATCH\",\r\n    });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource from the endpoint.\r\n   *\r\n   * @param resource The resource to delete e.g. People/1\r\n   */\r\n  public delete(resource = \"\") {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"DELETE\" });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use that method to add any kind of request (e.g. a head request) to\r\n   * the execution list.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *   const req = new ORequest('http://full.url/healt', { method: 'HEAD'});\r\n   *   const res = await o('http://another.url').request(req).fetch();\r\n   *   console.log(res.status); // e.g. 200 from http://full.url/healt\r\n   * ```\r\n   * @param req The request to add.\r\n   */\r\n  public request(req: ORequest) {\r\n    this.requests.push(req);\r\n  }\r\n\r\n  /**\r\n   * Determines how many request are outstanding.\r\n   */\r\n  public get pending() {\r\n    return this.requests.length;\r\n  }\r\n\r\n  /**\r\n   * Returns a URL based on the rootURL + the given resource\r\n   * @param resource The resource to join.\r\n   */\r\n  public getUrl(resource: string) {\r\n    return new URL(resource, this.config.rootUrl);\r\n  }\r\n\r\n  private async getFetch(query: OdataQuery) {\r\n    if (this.pending > 1) {\r\n      const result: Response[] = [];\r\n      for (const req of this.requests) {\r\n        req.applyQuery({ ...this.config.query, ...query });\r\n        const request = await req.fetch;\r\n        result.push(request);\r\n      }\r\n      return result;\r\n    } else {\r\n      this.requests[0].applyQuery({ ...this.config.query, ...query });\r\n      return [await this.requests[0].fetch];\r\n    }\r\n  }\r\n\r\n  private getBody(body: BodyType): any {\r\n    if (typeof body === \"object\") {\r\n      return JSON.stringify(body);\r\n    }\r\n    return body;\r\n  }\r\n}\r\n"],"names":["o","rootUrl","config","env","window","global","disablePolyfill","Error","require","shim","defaultConfigValues","batch","boundaryPrefix","changsetBoundaryPrefix","endpoint","headers","Headers","Content-Type","useChangset","useRelativeURLs","credentials","fragment","mode","redirect","referrer","onStart","onError","onFinish","mergedConfig","configUrl","location","href","URL","endsWith","ex","OHandler","url","this","Object","ORequest","req","Request","fetch","query","key","hasOwnProperty","searchParams","get","set","append","CRLF","resources","changeset","batchConfig","batchUid","getUid","checkForChangset","batchBody","forEach","method","applyQuery","contentId","map","_this","getRequestURL","getHeaders","getBody","join","OBatch","body","res","_a","status","text","data","parseResponse","responseData","contentTypeHeader","split","boundary","length","splitData","shift","pop","wasWithChangesetresponse","parsedData","dataSegments","trim","header","find","x","startsWith","includes","contentIdHeader","parseInt","substring","parsed","JSON","parse","changeRes","getChangeResources","getGETResources","filter","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","undefined","mapped","Array","from","push","getFetch","response","Promise","all","ok","json","requests","fetch_1","ex_3","getUrl","resource","request","pending","result","_i","_b","stringify"],"mappings":"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"}