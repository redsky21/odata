{"version":3,"file":"o.js","sources":["../../src/ORequest.ts","../../src/OBatch.ts","../../src/OHandler.ts","../../src/o.ts"],"sourcesContent":["import { OdataQuery } from \"./OdataQuery\";\r\n\r\nexport class ORequest {\r\n  public url: URL;\r\n\r\n  constructor(url: URL | string, public config: RequestInit) {\r\n    if (typeof url === \"string\") {\r\n      this.url = new URL(url);\r\n    } else {\r\n      this.url = url as URL;\r\n    }\r\n  }\r\n\r\n  public get fetch() {\r\n    const req = new Request(this.url.href, this.config);\r\n    return fetch(req, this.config);\r\n  }\r\n\r\n  public applyQuery(query?: OdataQuery) {\r\n    for (const key in query) {\r\n      if (query.hasOwnProperty(key)) {\r\n        if (this.url.searchParams.get(key)) {\r\n          this.url.searchParams.set(key, query[key]);\r\n        } else {\r\n          this.url.searchParams.append(key, query[key]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { OdataConfig } from \"./OdataConfig\";\r\nimport { OdataQuery } from \"./OdataQuery\";\r\nimport { ORequest } from \"./ORequest\";\r\n\r\nconst CRLF = \"\\r\\n\";\r\n\r\nexport class OBatch {\r\n  // \"\" here prevents 'undefined' at start of body under some conditions.\r\n  private batchBody = \"\";\r\n  private batchUid;\r\n  private batchConfig: OdataConfig;\r\n\r\n  constructor(\r\n    resources: ORequest[],\r\n    config: OdataConfig,\r\n    query?: OdataQuery,\r\n    private changeset: boolean = false,\r\n  ) {\r\n    this.batchConfig = { ...config, ...config.batch };\r\n    this.batchUid = this.getUid();\r\n    (this.batchConfig.headers as Headers).set(\r\n       \"Content-Type\",\r\n       `multipart/mixed; boundary=${this.batchUid}`,\r\n    );\r\n\r\n    if (this.batchConfig.batch.useChangset) {\r\n      resources = this.checkForChangset(resources, query);\r\n    } else {\r\n      this.batchBody += `--${this.batchUid}`;\r\n    }\r\n\r\n    resources.forEach(\r\n      (req) => req.config.method === \"GET\" && req.applyQuery(query),\r\n    );\r\n    let contentId = 0;\r\n    this.batchBody += resources.map((req) => {\r\n      contentId++;\r\n      if( req.config.method===\"GET\" ){\r\n        return [\r\n          \"\",\r\n          \"Content-Type: application/http\",\r\n          \"Content-Transfer-Encoding: binary\",\r\n          \"\",\r\n          `${req.config.method} ${this.getRequestURL(req)} HTTP/1.1`,\r\n          `${this.getHeaders(req)}`,\r\n          `${this.getBody(req)}`\r\n        ].join(CRLF);\r\n      }\r\n      else {\r\n        return [\r\n          \"\",\r\n          \"Content-Type: application/http\",\r\n          \"Content-Transfer-Encoding: binary\",\r\n          `Content-ID: ${contentId}`,\r\n          \"\",\r\n          `${req.config.method} ${this.getRequestURL(req)} HTTP/1.1`,\r\n          `${this.getHeaders(req)}`,\r\n          `${this.getBody(req)}`\r\n        ].join(CRLF);\r\n      }\r\n\r\n    }).join(`${CRLF}--${this.batchUid}`);\r\n\r\n    this.batchBody += `${CRLF}--${this.batchUid}--${CRLF}`;\r\n    if(!changeset){\r\n      (this.batchConfig.headers as Headers).set(\r\n        \"Content-Type\",\r\n        `multipart/mixed;boundary=${this.batchUid}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  public async fetch(url: URL) {\r\n    const req = new ORequest(url, {\r\n      ...this.batchConfig,\r\n      body: this.batchBody,\r\n      method: \"POST\",\r\n    });\r\n    const res: Response = await req.fetch;\r\n    if (res.status < 400) {\r\n      const data = await res.text();\r\n      return this.parseResponse(data, res.headers.get(\"Content-Type\"));\r\n    } else {\r\n      throw res;\r\n    }\r\n  }\r\n\r\n  public parseResponse(responseData: string, contentTypeHeader: string): any {\r\n    const headers = contentTypeHeader.split(\"boundary=\");\r\n    const boundary = headers[headers.length - 1];\r\n    const splitData = responseData.split(`--${boundary}`);\r\n    splitData.shift();\r\n    splitData.pop();\r\n    let wasWithChangesetresponse = false;\r\n    const parsedData = splitData.map((data) => {\r\n      const dataSegments = data.trim().split(\"\\r\\n\\r\\n\");\r\n      if (dataSegments.length === 0) {\r\n        // we are unable to parse -> return all\r\n        return data;\r\n      } else if (dataSegments.length > 3) {\r\n        const header = dataSegments.find(\r\n            (x) => x.startsWith(\"Content-Type: \") && x.includes(\"boundary=changesetresponse_\"));\r\n        if (!header) {\r\n          return data;\r\n        }\r\n        dataSegments.shift();\r\n        wasWithChangesetresponse = true;\r\n        return this.parseResponse(dataSegments.join(\"\\r\\n\\r\\n\"), header);\r\n      } else {\r\n        var contentIdHeader = dataSegments[0].split(\"\\r\\n\").find(function (x) { return x.startsWith(\"Content-ID: \"); });\r\n        if (contentIdHeader) {\r\n          try {\r\n            var contentId = parseInt(contentIdHeader.substring(12), 10);\r\n          } catch (ex) {\r\n          }\r\n        }\r\n        var status = +dataSegments[1].split(\" \")[1];\r\n        if (dataSegments.length === 3) {\r\n          // if length == 3 we have a body, try to parse if JSON and return that!\r\n          var body;\r\n          try {\r\n            const parsed = JSON.parse(dataSegments[2]);\r\n            const hasFragment = parsed[this.batchConfig.fragment];\r\n            body = hasFragment || parsed;\r\n          } catch (ex) {\r\n            body = dataSegments[2];\r\n          }\r\n        }\r\n        return { contentId, status, body };\r\n      }\r\n    });\r\n    if (wasWithChangesetresponse) {\r\n        return parsedData[0];\r\n    }\r\n    return parsedData;\r\n  }\r\n\r\n  /**\r\n   * If we determine a changset (POST, PUT, PATCH) we initalize a new\r\n   * OBatch instance for it.\r\n   */\r\n  private checkForChangset(resources: ORequest[], query: OdataQuery) {\r\n    const changeRes = this.getChangeResources(resources);\r\n\r\n    if (this.changeset) {\r\n      this.batchBody += [\r\n        \"\",\r\n        `Content-Type: multipart/mixed;boundary=${this.batchUid}`,\r\n        \"\",\r\n        `--${this.batchUid}`\r\n      ].join(CRLF);\r\n    } else if (changeRes.length > 0) {\r\n      this.batchBody = `--${this.batchUid}`;\r\n      this.batchBody += new OBatch(\r\n        changeRes,\r\n        this.batchConfig,\r\n        query,\r\n        true,\r\n      ).batchBody;\r\n      resources = this.getGETResources(resources);\r\n    } else {\r\n      this.batchBody = `--${this.batchUid}`;\r\n    }\r\n    return resources;\r\n  }\r\n\r\n  private getGETResources(resources: ORequest[]): ORequest[] {\r\n    return resources.filter((req) => req.config.method === \"GET\");\r\n  }\r\n\r\n  private getChangeResources(resources: ORequest[]): ORequest[] {\r\n    return resources.filter((req) => req.config.method !== \"GET\");\r\n  }\r\n\r\n  private getBody(req: ORequest) {\r\n    if (req.config.body) {\r\n      return `${req.config.body}${CRLF}${CRLF}`;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  private getUid() {\r\n    let d = new Date().getTime();\r\n    const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n      const r = (d + Math.random() * 16) % 16 | 0;\r\n      d = Math.floor(d / 16);\r\n      return (c === \"x\" ? r : (r & 0x7) | 0x8).toString(16);\r\n    });\r\n    return `${\r\n      this.changeset\r\n        ? this.batchConfig.batch.changsetBoundaryPrefix\r\n        : this.batchConfig.batch.boundaryPrefix\r\n    }${uuid}`;\r\n  }\r\n\r\n  private getHeaders(req: ORequest): string {\r\n  // Request headers can be Headers | string[][] | Record<string, string>.\r\n  // A new Headers instance around them allows treatment of all three types\r\n  // to be the same. This also applies security last two could bypass.\r\n  const headers = new Headers(req.config.headers || undefined) as any;\r\n  // Convert each header to single string.\r\n  // Headers is iterable. Array.from is needed instead of Object.keys.\r\n  const mapped = Array.from(headers).map(([k, v]) => `${k}: ${v}`);\r\n  if (mapped.length) {\r\n    // Need to ensure a blank line between HEADERS and BODY. When there are\r\n    // headers, it must be added here. Otherwise blank is added in ctor.\r\n    mapped.push(\"\");\r\n  }\r\n  return mapped.join(CRLF);\r\n  }\r\n\r\n  private getRequestURL(req: ORequest): string {\r\n  let href = req.url.href;\r\n  if (this.batchConfig.batch.useRelativeURLs) {\r\n    // Strip away matching root from request.\r\n    href = href.replace((this.batchConfig.rootUrl as URL).href, \"\");\r\n  }\r\n  return href;\r\n  }\r\n}\r\n","import { OBatch } from \"./OBatch\";\r\nimport { OdataConfig } from \"./OdataConfig\";\r\nimport { OdataQuery } from \"./OdataQuery\";\r\nimport { ORequest } from \"./ORequest\";\r\n\r\ntype BodyType = Blob | BufferSource | FormData | URLSearchParams | string | object;\r\n\r\nexport class OHandler {\r\n  private requests: ORequest[] = [];\r\n\r\n  constructor(public config: OdataConfig) {}\r\n\r\n  /**\r\n   * Does a fetch request to the given endpoint and request\r\n   * all resources in sequent. Tries to parse the result logical\r\n   * so that no further processing is used. If the result is only one\r\n   * entity a object is returned, otherwise a array of objects.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *  const russell = await o('https://services.odata.org/TripPinRESTierService/')\r\n   *  .get('People('russellwhyte')\r\n   *  .query();\r\n   *\r\n   *  console.log(russell); // shows: { FirstName: \"Russell\", LastName: \"Whyte\" [...] }\r\n   * ```\r\n   *\r\n   * If the request fails with an error code higher then 400 it throws the\r\n   * Response:\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *  try {\r\n   *    const unknown = await o('https://services.odata.org/TripPinRESTierService/')\r\n   *      .get('People('unknown')\r\n   *      .query();\r\n   *  } catch(res) { // Response\r\n   *    console.log(res.status); // 404\r\n   *  }\r\n   * ```\r\n   *\r\n   * @param query The URLSearchParams that are added to the question mark on the url.\r\n   *              That are usually the odata queries like $filter, $top, etc...\r\n   * @returns Either an array or a object with the given entities. If multiple\r\n   *          resources are fetched, this method returns a array of array/object. If there\r\n   *          is no content (e.g. for delete) this method returns the Response\r\n   */\r\n  public async query(query?: OdataQuery) {\r\n    try {\r\n      this.config.onStart(this);\r\n      const response: Response[] = await this.getFetch(query);\r\n      const json = await Promise.all(\r\n        response.map(\r\n          async (res) => {\r\n            if (res.status >= 400) {\r\n              this.config.onError(this, res);\r\n              throw res;\r\n            } else if (res.ok && res.json) {\r\n              try {\r\n                this.config.onFinish(this, res);\r\n                const data = await res.json();\r\n                return data[this.config.fragment] || data;\r\n              } catch (ex) {\r\n                return res;\r\n              }\r\n            } else {\r\n              return await res.text();\r\n            }\r\n          },\r\n        ),\r\n      );\r\n      return json.length > 1 ? json : json[0];\r\n    } catch (ex) {\r\n      throw ex;\r\n    } finally {\r\n      this.requests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request all requests in sequent. Does simply return a Response or Response[]\r\n   * without any data parsing applied.\r\n   *\r\n   * @param query The URLSearchParams that are added to the question mark on the url.\r\n   *              That are usually the odata queries like $filter, $top, etc...\r\n   */\r\n  public async fetch(query?: OdataQuery) {\r\n    try {\r\n      this.config.onStart(this);\r\n      const fetch = await this.getFetch(query);\r\n      return fetch.length === 1 ? fetch[0] : fetch;\r\n    } catch (ex) {\r\n      this.config.onError(this, ex);\r\n      throw ex;\r\n    } finally {\r\n      this.config.onFinish(this);\r\n      this.requests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Does a batch http-batch request. All request in that sequent are send via one\r\n   * physically request and afterwards parsed to separate data chunks.\r\n   *\r\n   * @param query The URLSearchParams that are added to the question mark on the url.\r\n   *              That are usually the odata queries like $filter, $top, etc...\r\n   */\r\n  public async batch(query?: OdataQuery) {\r\n    try {\r\n      const batch = new OBatch(this.requests, this.config, query);\r\n      const url = this.getUrl(this.config.batch.endpoint);\r\n      const data = await batch.fetch(url);\r\n      return data;\r\n    } catch (ex) {\r\n      throw ex;\r\n    } finally {\r\n      this.requests = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the data from the endpoint + resource url.\r\n   *\r\n   * @param resource The resource to request e.g. People/$value.\r\n   */\r\n  public get(resource: string = \"\") {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"GET\" });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Post data to an endpoint + resource.\r\n   *\r\n   * @param resource The resource to post to.\r\n   * @param body The data to post.\r\n   */\r\n  public post(resource: string = \"\", body: BodyType) {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"POST\", body: this.getBody(body) });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Put data to an endpoint + resource.\r\n   *\r\n   * @param resource The resource to put to.\r\n   * @param body The data to put.\r\n   */\r\n  public put(resource: string = \"\", body: BodyType) {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"PUT\", body: this.getBody(body) });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Patch data to an endpoint + resource.\r\n   *\r\n   * @param resource The resource to patch to.\r\n   * @param body The data to patch.\r\n   */\r\n  public patch(resource: string = \"\", body: BodyType) {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, {\r\n      ...this.config,\r\n      body: this.getBody(body),\r\n      method: \"PATCH\",\r\n    });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource from the endpoint.\r\n   *\r\n   * @param resource The resource to delete e.g. People/1\r\n   */\r\n  public delete(resource = \"\") {\r\n    const url = this.getUrl(resource);\r\n    const request = new ORequest(url, { ...this.config, method: \"DELETE\" });\r\n    this.requests.push(request);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use that method to add any kind of request (e.g. a head request) to\r\n   * the execution list.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *   const req = new ORequest('http://full.url/healt', { method: 'HEAD'});\r\n   *   const res = await o('http://another.url').request(req).fetch();\r\n   *   console.log(res.status); // e.g. 200 from http://full.url/healt\r\n   * ```\r\n   * @param req The request to add.\r\n   */\r\n  public request(req: ORequest) {\r\n    this.requests.push(req);\r\n  }\r\n\r\n  /**\r\n   * Determines how many request are outstanding.\r\n   */\r\n  public get pending() {\r\n    return this.requests.length;\r\n  }\r\n\r\n  /**\r\n   * Returns a URL based on the rootURL + the given resource\r\n   * @param resource The resource to join.\r\n   */\r\n  public getUrl(resource: string) {\r\n    return new URL(resource, this.config.rootUrl);\r\n  }\r\n\r\n  private async getFetch(query: OdataQuery) {\r\n    if (this.pending > 1) {\r\n      const result: Response[] = [];\r\n      for (const req of this.requests) {\r\n        req.applyQuery({ ...this.config.query, ...query });\r\n        const request = await req.fetch;\r\n        result.push(request);\r\n      }\r\n      return result;\r\n    } else {\r\n      this.requests[0].applyQuery({ ...this.config.query, ...query });\r\n      return [await this.requests[0].fetch];\r\n    }\r\n  }\r\n\r\n  private getBody(body: BodyType): any {\r\n    if (typeof body === \"object\") {\r\n      return JSON.stringify(body);\r\n    }\r\n    return body;\r\n  }\r\n}\r\n","import { OdataConfig } from \"./OdataConfig\";\r\nimport { OHandler } from \"./OHandler\";\r\n\r\n/**\r\n * Use the 'o'-function to initialize a request directly or use the returned\r\n * handler to store the settings.\r\n *\r\n * Use o() directly jquery like:\r\n * @example\r\n * ```typescript\r\n *  await o('https://rootUrl').get('resource').query();\r\n * ```\r\n *\r\n * Or with a handler:\r\n * @example\r\n * ```typescript\r\n *  const oHandler = o('https://rootUrl');\r\n *  await oHandler.get('resource').query({ $top: 2 });\r\n * ```\r\n *\r\n * @param rootUrl The url to query\r\n * @param config The odata and fetch configuration.\r\n */\r\nexport function o(\r\n  rootUrl: string | URL,\r\n  config: Partial<OdataConfig> = {}\r\n) {\r\n  // polyfill fetch if we have no fetch\r\n  const env = typeof window !== \"undefined\" ? window : global;\r\n  if (\r\n    !(\"fetch\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window !== \"undefined\"\r\n  ) {\r\n    throw new Error(\r\n      \"No polyfill found for fetch(). You need to include dist/umd/o.polyfill.js to work with older browsers\"\r\n    );\r\n  }\r\n\r\n  if (\r\n    !(\"fetch\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window === \"undefined\"\r\n  ) {\r\n    require(\"cross-fetch/polyfill\");\r\n  }\r\n\r\n  if (\r\n    !(\"URL\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window !== \"undefined\"\r\n  ) {\r\n    throw new Error(\r\n      \"No polyfill found for URL(). You need to include dist/umd/o.polyfill.js to work with older browsers\"\r\n    );\r\n  }\r\n\r\n  if (\r\n    !(\"URL\" in env) &&\r\n    !config.disablePolyfill &&\r\n    typeof window === \"undefined\"\r\n  ) {\r\n    require(\"universal-url\").shim();\r\n  }\r\n\r\n  // set the default configuration values\r\n  const defaultConfigValues: OdataConfig = {\r\n    batch: {\r\n      boundaryPrefix: \"batch_\",\r\n      changsetBoundaryPrefix: \"changset_\",\r\n      endpoint: \"$batch\",\r\n      headers: new Headers({\r\n        \"Content-Type\": \"multipart/mixed\",\r\n      }),\r\n      useChangset: false,\r\n      useRelativeURLs: false,\r\n    },\r\n    credentials: \"omit\",\r\n    fragment: \"value\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n    }),\r\n    mode: \"cors\",\r\n    redirect: \"follow\",\r\n    referrer: \"client\",\r\n    onStart: () => null,\r\n    onError: () => null,\r\n    onFinish: () => null,\r\n  };\r\n\r\n  const mergedConfig: OdataConfig = { ...defaultConfigValues, ...config };\r\n  if (typeof rootUrl === \"string\") {\r\n    try {\r\n      // we assuming a resource\r\n      const configUrl = (mergedConfig.rootUrl ||\r\n        window.location.href) as string;\r\n      rootUrl = new URL(\r\n        rootUrl,\r\n        configUrl.endsWith(\"/\") ? configUrl : `${configUrl}/`\r\n      );\r\n    } catch (ex) {\r\n      // no window?!\r\n      rootUrl = new URL(rootUrl as string, mergedConfig.rootUrl);\r\n    }\r\n  }\r\n  mergedConfig.rootUrl = rootUrl;\r\n  return new OHandler(mergedConfig);\r\n}\r\n\r\n/**\r\n * Default exports\r\n */\r\nexport * from \"./OBatch\";\r\nexport * from \"./OdataConfig\";\r\nexport * from \"./OdataQuery\";\r\nexport * from \"./OHandler\";\r\nexport * from \"./ORequest\";\r\n"],"names":[],"mappings":"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"}